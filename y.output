State 60 conflicts: 1 shift/reduce


Grammar

    0 $accept: PROGRAM $end

    1 PROGRAM: DECLS

    2 DECLS: DECL
    3      | DECLS DECL

    4 DECL: VARIABLEDECL
    5     | FUNCTIONDECL
    6     | CLASSDECL
    7     | INTERFACEDECL

    8 VARIABLEDECLS: %empty
    9              | VARIABLEDECLS VARIABLEDECL

   10 VARIABLEDECL: VARIABLE _semicolon

   11 VARIABLE: TYPE _id

   12 TYPE: _int
   13     | _double
   14     | _boolean
   15     | _string
   16     | TYPE _leftbracket _rightbracket
   17     | _id

   18 FUNCTIONDECL: TYPE _id _leftparen FORMALS _rightparen STMTBLOCK
   19             | _void _id _leftparen FORMALS _rightparen STMTBLOCK

   20 FORMALS: VARIABLES
   21        | %empty

   22 VARIABLES: VARIABLE
   23          | VARIABLES _comma VARIABLE

   24 CLASSDECL: _class _id EXTENDS IMPLEMENTS _leftbrace FIELDS _rightbrace

   25 EXTENDS: %empty
   26        | _extends _id

   27 IMPLEMENTS: %empty
   28           | _implements IDS

   29 FIELDS: %empty
   30       | FIELDS FIELD

   31 FIELD: VARIABLEDECL
   32      | FUNCTIONDECL

   33 IDS: _id
   34    | IDS _comma _id

   35 INTERFACEDECL: _interface _id _leftbrace PROTOTYPES _rightbrace

   36 PROTOTYPES: %empty
   37           | PROTOTYPES PROTOTYPE

   38 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen _semicolon
   39          | _void _id _leftparen FORMALS _rightparen _semicolon

   40 STMTBLOCK: _leftbrace VARIABLEDECLS STMTS _rightbrace

   41 STMTS: %empty
   42      | STMTS STMT

   43 STMT: EXPRA _semicolon
   44     | IFSTMT
   45     | WHILESTMT
   46     | FORSTMT
   47     | BREAKSTMT
   48     | RETURNSTMT
   49     | PRINTSTMT
   50     | STMTBLOCK

   51 EXPRA: %empty
   52      | EXPR

   53 IFSTMT: _if _leftparen EXPR _rightparen STMT
   54       | _if _leftparen EXPR _rightparen STMT _else STMT

   55 WHILESTMT: _while _leftparen EXPR _rightparen STMT

   56 FORSTMT: _for _leftparen EXPRA _semicolon EXPR _semicolon EXPRA _rightparen STMT

   57 BREAKSTMT: _break _semicolon

   58 RETURNSTMT: _return EXPRA _semicolon

   59 PRINTSTMT: _println _leftparen EXPRS _rightparen _semicolon

   60 EXPRS: EXPR
   61      | EXPRS _comma EXPR

   62 EXPR: LVALUE _assignop EXPR
   63     | CONSTANT
   64     | LVALUE
   65     | CALL
   66     | _leftparen EXPR _rightparen
   67     | EXPR _plus EXPR
   68     | EXPR _minus EXPR
   69     | EXPR _multiplication EXPR
   70     | EXPR _division EXPR
   71     | EXPR _mod EXPR
   72     | _minus EXPR
   73     | EXPR _less EXPR
   74     | EXPR _lessequal EXPR
   75     | EXPR _greater EXPR
   76     | EXPR _greaterequal EXPR
   77     | EXPR _equal EXPR
   78     | EXPR _notequal EXPR
   79     | EXPR _and EXPR
   80     | EXPR _or EXPR
   81     | _not EXPR
   82     | _readln "()"
   83     | _newarray _leftparen _intconstant _comma TYPE _rightparen

   84 LVALUE: _id LVALUES

   85 LVALUES: %empty
   86        | LVALUE _leftbracket EXPR _rightbracket
   87        | LVALUE _period _id LVALUES

   88 CALL: _id _leftparen ACTUALS _rightparen
   89     | _id _period _id _leftparen ACTUALS _rightparen

   90 ACTUALS: %empty
   91        | EXPRS

   92 CONSTANT: _intconstant
   93         | _doubleconstant
   94         | _stringconstant
   95         | _booleanconstant


Terminals, with rules where they appear

$end (0) 0
error (256)
_void (258) 19 39
_id (259) 11 17 18 19 24 26 33 34 35 38 39 84 87 88 89
_leftparen (260) 18 19 38 39 53 54 55 56 59 66 83 88 89
_rightparen (261) 18 19 38 39 53 54 55 56 59 66 83 88 89
_leftbrace (262) 24 35 40
_rightbrace (263) 24 35 40
_leftbracket (264) 16 86
_rightbracket (265) 16 86
_semicolon (266) 10 38 39 43 56 57 58 59
_boolean (267) 14
_double (268) 13
_int (269) 12
_string (270) 15
_class (271) 24
_implements (272) 28
_interface (273) 35
_if (274) 53 54
_else (275) 54
_break (276) 57
_extends (277) 26
_for (278) 56
_newarray (279) 83
_println (280) 59
_readln (281) 82
_return (282) 58
_while (283) 55
_comma (284) 23 34 61 83
_period (285) 87 89
_intconstant (286) 83 92
_doubleconstant (287) 93
_stringconstant (288) 94
_booleanconstant (289) 95
_assignop (290) 62
_or (291) 80
_and (292) 79
_equal (293) 77
_notequal (294) 78
_less (295) 73
_lessequal (296) 74
_greater (297) 75
_greaterequal (298) 76
_plus (299) 67
_minus (300) 68 72
_multiplication (301) 69
_division (302) 70
_mod (303) 71
_not (304) 81
"then" (305)
"()" (306) 82


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
PROGRAM (53)
    on left: 1, on right: 0
DECLS (54)
    on left: 2 3, on right: 1 3
DECL (55)
    on left: 4 5 6 7, on right: 2 3
VARIABLEDECLS (56)
    on left: 8 9, on right: 9 40
VARIABLEDECL (57)
    on left: 10, on right: 4 9 31
VARIABLE (58)
    on left: 11, on right: 10 22 23
TYPE (59)
    on left: 12 13 14 15 16 17, on right: 11 16 18 38 83
FUNCTIONDECL (60)
    on left: 18 19, on right: 5 32
FORMALS (61)
    on left: 20 21, on right: 18 19 38 39
VARIABLES (62)
    on left: 22 23, on right: 20 23
CLASSDECL (63)
    on left: 24, on right: 6
EXTENDS (64)
    on left: 25 26, on right: 24
IMPLEMENTS (65)
    on left: 27 28, on right: 24
FIELDS (66)
    on left: 29 30, on right: 24 30
FIELD (67)
    on left: 31 32, on right: 30
IDS (68)
    on left: 33 34, on right: 28 34
INTERFACEDECL (69)
    on left: 35, on right: 7
PROTOTYPES (70)
    on left: 36 37, on right: 35 37
PROTOTYPE (71)
    on left: 38 39, on right: 37
STMTBLOCK (72)
    on left: 40, on right: 18 19 50
STMTS (73)
    on left: 41 42, on right: 40 42
STMT (74)
    on left: 43 44 45 46 47 48 49 50, on right: 42 53 54 55 56
EXPRA (75)
    on left: 51 52, on right: 43 56 58
IFSTMT (76)
    on left: 53 54, on right: 44
WHILESTMT (77)
    on left: 55, on right: 45
FORSTMT (78)
    on left: 56, on right: 46
BREAKSTMT (79)
    on left: 57, on right: 47
RETURNSTMT (80)
    on left: 58, on right: 48
PRINTSTMT (81)
    on left: 59, on right: 49
EXPRS (82)
    on left: 60 61, on right: 59 61 91
EXPR (83)
    on left: 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79
    80 81 82 83, on right: 52 53 54 55 56 60 61 62 66 67 68 69 70 71
    72 73 74 75 76 77 78 79 80 81 86
LVALUE (84)
    on left: 84, on right: 62 64 86 87
LVALUES (85)
    on left: 85 86 87, on right: 84 87
CALL (86)
    on left: 88 89, on right: 65
ACTUALS (87)
    on left: 90 91, on right: 88 89
CONSTANT (88)
    on left: 92 93 94 95, on right: 63


State 0

    0 $accept: . PROGRAM $end

    _void       shift, and go to state 1
    _id         shift, and go to state 2
    _boolean    shift, and go to state 3
    _double     shift, and go to state 4
    _int        shift, and go to state 5
    _string     shift, and go to state 6
    _class      shift, and go to state 7
    _interface  shift, and go to state 8

    PROGRAM        go to state 9
    DECLS          go to state 10
    DECL           go to state 11
    VARIABLEDECL   go to state 12
    VARIABLE       go to state 13
    TYPE           go to state 14
    FUNCTIONDECL   go to state 15
    CLASSDECL      go to state 16
    INTERFACEDECL  go to state 17


State 1

   19 FUNCTIONDECL: _void . _id _leftparen FORMALS _rightparen STMTBLOCK

    _id  shift, and go to state 18


State 2

   17 TYPE: _id .

    $default  reduce using rule 17 (TYPE)


State 3

   14 TYPE: _boolean .

    $default  reduce using rule 14 (TYPE)


State 4

   13 TYPE: _double .

    $default  reduce using rule 13 (TYPE)


State 5

   12 TYPE: _int .

    $default  reduce using rule 12 (TYPE)


State 6

   15 TYPE: _string .

    $default  reduce using rule 15 (TYPE)


State 7

   24 CLASSDECL: _class . _id EXTENDS IMPLEMENTS _leftbrace FIELDS _rightbrace

    _id  shift, and go to state 19


State 8

   35 INTERFACEDECL: _interface . _id _leftbrace PROTOTYPES _rightbrace

    _id  shift, and go to state 20


State 9

    0 $accept: PROGRAM . $end

    $end  shift, and go to state 21


State 10

    1 PROGRAM: DECLS .
    3 DECLS: DECLS . DECL

    _void       shift, and go to state 1
    _id         shift, and go to state 2
    _boolean    shift, and go to state 3
    _double     shift, and go to state 4
    _int        shift, and go to state 5
    _string     shift, and go to state 6
    _class      shift, and go to state 7
    _interface  shift, and go to state 8

    $default  reduce using rule 1 (PROGRAM)

    DECL           go to state 22
    VARIABLEDECL   go to state 12
    VARIABLE       go to state 13
    TYPE           go to state 14
    FUNCTIONDECL   go to state 15
    CLASSDECL      go to state 16
    INTERFACEDECL  go to state 17


State 11

    2 DECLS: DECL .

    $default  reduce using rule 2 (DECLS)


State 12

    4 DECL: VARIABLEDECL .

    $default  reduce using rule 4 (DECL)


State 13

   10 VARIABLEDECL: VARIABLE . _semicolon

    _semicolon  shift, and go to state 23


State 14

   11 VARIABLE: TYPE . _id
   16 TYPE: TYPE . _leftbracket _rightbracket
   18 FUNCTIONDECL: TYPE . _id _leftparen FORMALS _rightparen STMTBLOCK

    _id           shift, and go to state 24
    _leftbracket  shift, and go to state 25


State 15

    5 DECL: FUNCTIONDECL .

    $default  reduce using rule 5 (DECL)


State 16

    6 DECL: CLASSDECL .

    $default  reduce using rule 6 (DECL)


State 17

    7 DECL: INTERFACEDECL .

    $default  reduce using rule 7 (DECL)


State 18

   19 FUNCTIONDECL: _void _id . _leftparen FORMALS _rightparen STMTBLOCK

    _leftparen  shift, and go to state 26


State 19

   24 CLASSDECL: _class _id . EXTENDS IMPLEMENTS _leftbrace FIELDS _rightbrace

    _extends  shift, and go to state 27

    $default  reduce using rule 25 (EXTENDS)

    EXTENDS  go to state 28


State 20

   35 INTERFACEDECL: _interface _id . _leftbrace PROTOTYPES _rightbrace

    _leftbrace  shift, and go to state 29


State 21

    0 $accept: PROGRAM $end .

    $default  accept


State 22

    3 DECLS: DECLS DECL .

    $default  reduce using rule 3 (DECLS)


State 23

   10 VARIABLEDECL: VARIABLE _semicolon .

    $default  reduce using rule 10 (VARIABLEDECL)


State 24

   11 VARIABLE: TYPE _id .
   18 FUNCTIONDECL: TYPE _id . _leftparen FORMALS _rightparen STMTBLOCK

    _leftparen  shift, and go to state 30

    $default  reduce using rule 11 (VARIABLE)


State 25

   16 TYPE: TYPE _leftbracket . _rightbracket

    _rightbracket  shift, and go to state 31


State 26

   19 FUNCTIONDECL: _void _id _leftparen . FORMALS _rightparen STMTBLOCK

    _id       shift, and go to state 2
    _boolean  shift, and go to state 3
    _double   shift, and go to state 4
    _int      shift, and go to state 5
    _string   shift, and go to state 6

    $default  reduce using rule 21 (FORMALS)

    VARIABLE   go to state 32
    TYPE       go to state 33
    FORMALS    go to state 34
    VARIABLES  go to state 35


State 27

   26 EXTENDS: _extends . _id

    _id  shift, and go to state 36


State 28

   24 CLASSDECL: _class _id EXTENDS . IMPLEMENTS _leftbrace FIELDS _rightbrace

    _implements  shift, and go to state 37

    $default  reduce using rule 27 (IMPLEMENTS)

    IMPLEMENTS  go to state 38


State 29

   35 INTERFACEDECL: _interface _id _leftbrace . PROTOTYPES _rightbrace

    $default  reduce using rule 36 (PROTOTYPES)

    PROTOTYPES  go to state 39


State 30

   18 FUNCTIONDECL: TYPE _id _leftparen . FORMALS _rightparen STMTBLOCK

    _id       shift, and go to state 2
    _boolean  shift, and go to state 3
    _double   shift, and go to state 4
    _int      shift, and go to state 5
    _string   shift, and go to state 6

    $default  reduce using rule 21 (FORMALS)

    VARIABLE   go to state 32
    TYPE       go to state 33
    FORMALS    go to state 40
    VARIABLES  go to state 35


State 31

   16 TYPE: TYPE _leftbracket _rightbracket .

    $default  reduce using rule 16 (TYPE)


State 32

   22 VARIABLES: VARIABLE .

    $default  reduce using rule 22 (VARIABLES)


State 33

   11 VARIABLE: TYPE . _id
   16 TYPE: TYPE . _leftbracket _rightbracket

    _id           shift, and go to state 41
    _leftbracket  shift, and go to state 25


State 34

   19 FUNCTIONDECL: _void _id _leftparen FORMALS . _rightparen STMTBLOCK

    _rightparen  shift, and go to state 42


State 35

   20 FORMALS: VARIABLES .
   23 VARIABLES: VARIABLES . _comma VARIABLE

    _comma  shift, and go to state 43

    $default  reduce using rule 20 (FORMALS)


State 36

   26 EXTENDS: _extends _id .

    $default  reduce using rule 26 (EXTENDS)


State 37

   28 IMPLEMENTS: _implements . IDS

    _id  shift, and go to state 44

    IDS  go to state 45


State 38

   24 CLASSDECL: _class _id EXTENDS IMPLEMENTS . _leftbrace FIELDS _rightbrace

    _leftbrace  shift, and go to state 46


State 39

   35 INTERFACEDECL: _interface _id _leftbrace PROTOTYPES . _rightbrace
   37 PROTOTYPES: PROTOTYPES . PROTOTYPE

    _void        shift, and go to state 47
    _id          shift, and go to state 2
    _rightbrace  shift, and go to state 48
    _boolean     shift, and go to state 3
    _double      shift, and go to state 4
    _int         shift, and go to state 5
    _string      shift, and go to state 6

    TYPE       go to state 49
    PROTOTYPE  go to state 50


State 40

   18 FUNCTIONDECL: TYPE _id _leftparen FORMALS . _rightparen STMTBLOCK

    _rightparen  shift, and go to state 51


State 41

   11 VARIABLE: TYPE _id .

    $default  reduce using rule 11 (VARIABLE)


State 42

   19 FUNCTIONDECL: _void _id _leftparen FORMALS _rightparen . STMTBLOCK

    _leftbrace  shift, and go to state 52

    STMTBLOCK  go to state 53


State 43

   23 VARIABLES: VARIABLES _comma . VARIABLE

    _id       shift, and go to state 2
    _boolean  shift, and go to state 3
    _double   shift, and go to state 4
    _int      shift, and go to state 5
    _string   shift, and go to state 6

    VARIABLE  go to state 54
    TYPE      go to state 33


State 44

   33 IDS: _id .

    $default  reduce using rule 33 (IDS)


State 45

   28 IMPLEMENTS: _implements IDS .
   34 IDS: IDS . _comma _id

    _comma  shift, and go to state 55

    $default  reduce using rule 28 (IMPLEMENTS)


State 46

   24 CLASSDECL: _class _id EXTENDS IMPLEMENTS _leftbrace . FIELDS _rightbrace

    $default  reduce using rule 29 (FIELDS)

    FIELDS  go to state 56


State 47

   39 PROTOTYPE: _void . _id _leftparen FORMALS _rightparen _semicolon

    _id  shift, and go to state 57


State 48

   35 INTERFACEDECL: _interface _id _leftbrace PROTOTYPES _rightbrace .

    $default  reduce using rule 35 (INTERFACEDECL)


State 49

   16 TYPE: TYPE . _leftbracket _rightbracket
   38 PROTOTYPE: TYPE . _id _leftparen FORMALS _rightparen _semicolon

    _id           shift, and go to state 58
    _leftbracket  shift, and go to state 25


State 50

   37 PROTOTYPES: PROTOTYPES PROTOTYPE .

    $default  reduce using rule 37 (PROTOTYPES)


State 51

   18 FUNCTIONDECL: TYPE _id _leftparen FORMALS _rightparen . STMTBLOCK

    _leftbrace  shift, and go to state 52

    STMTBLOCK  go to state 59


State 52

   40 STMTBLOCK: _leftbrace . VARIABLEDECLS STMTS _rightbrace

    $default  reduce using rule 8 (VARIABLEDECLS)

    VARIABLEDECLS  go to state 60


State 53

   19 FUNCTIONDECL: _void _id _leftparen FORMALS _rightparen STMTBLOCK .

    $default  reduce using rule 19 (FUNCTIONDECL)


State 54

   23 VARIABLES: VARIABLES _comma VARIABLE .

    $default  reduce using rule 23 (VARIABLES)


State 55

   34 IDS: IDS _comma . _id

    _id  shift, and go to state 61


State 56

   24 CLASSDECL: _class _id EXTENDS IMPLEMENTS _leftbrace FIELDS . _rightbrace
   30 FIELDS: FIELDS . FIELD

    _void        shift, and go to state 1
    _id          shift, and go to state 2
    _rightbrace  shift, and go to state 62
    _boolean     shift, and go to state 3
    _double      shift, and go to state 4
    _int         shift, and go to state 5
    _string      shift, and go to state 6

    VARIABLEDECL  go to state 63
    VARIABLE      go to state 13
    TYPE          go to state 14
    FUNCTIONDECL  go to state 64
    FIELD         go to state 65


State 57

   39 PROTOTYPE: _void _id . _leftparen FORMALS _rightparen _semicolon

    _leftparen  shift, and go to state 66


State 58

   38 PROTOTYPE: TYPE _id . _leftparen FORMALS _rightparen _semicolon

    _leftparen  shift, and go to state 67


State 59

   18 FUNCTIONDECL: TYPE _id _leftparen FORMALS _rightparen STMTBLOCK .

    $default  reduce using rule 18 (FUNCTIONDECL)


State 60

    9 VARIABLEDECLS: VARIABLEDECLS . VARIABLEDECL
   40 STMTBLOCK: _leftbrace VARIABLEDECLS . STMTS _rightbrace

    _id       shift, and go to state 2
    _boolean  shift, and go to state 3
    _double   shift, and go to state 4
    _int      shift, and go to state 5
    _string   shift, and go to state 6

    _id       [reduce using rule 41 (STMTS)]
    $default  reduce using rule 41 (STMTS)

    VARIABLEDECL  go to state 68
    VARIABLE      go to state 13
    TYPE          go to state 33
    STMTS         go to state 69


State 61

   34 IDS: IDS _comma _id .

    $default  reduce using rule 34 (IDS)


State 62

   24 CLASSDECL: _class _id EXTENDS IMPLEMENTS _leftbrace FIELDS _rightbrace .

    $default  reduce using rule 24 (CLASSDECL)


State 63

   31 FIELD: VARIABLEDECL .

    $default  reduce using rule 31 (FIELD)


State 64

   32 FIELD: FUNCTIONDECL .

    $default  reduce using rule 32 (FIELD)


State 65

   30 FIELDS: FIELDS FIELD .

    $default  reduce using rule 30 (FIELDS)


State 66

   39 PROTOTYPE: _void _id _leftparen . FORMALS _rightparen _semicolon

    _id       shift, and go to state 2
    _boolean  shift, and go to state 3
    _double   shift, and go to state 4
    _int      shift, and go to state 5
    _string   shift, and go to state 6

    $default  reduce using rule 21 (FORMALS)

    VARIABLE   go to state 32
    TYPE       go to state 33
    FORMALS    go to state 70
    VARIABLES  go to state 35


State 67

   38 PROTOTYPE: TYPE _id _leftparen . FORMALS _rightparen _semicolon

    _id       shift, and go to state 2
    _boolean  shift, and go to state 3
    _double   shift, and go to state 4
    _int      shift, and go to state 5
    _string   shift, and go to state 6

    $default  reduce using rule 21 (FORMALS)

    VARIABLE   go to state 32
    TYPE       go to state 33
    FORMALS    go to state 71
    VARIABLES  go to state 35


State 68

    9 VARIABLEDECLS: VARIABLEDECLS VARIABLEDECL .

    $default  reduce using rule 9 (VARIABLEDECLS)


State 69

   40 STMTBLOCK: _leftbrace VARIABLEDECLS STMTS . _rightbrace
   42 STMTS: STMTS . STMT

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _leftbrace        shift, and go to state 52
    _rightbrace       shift, and go to state 74
    _if               shift, and go to state 75
    _break            shift, and go to state 76
    _for              shift, and go to state 77
    _newarray         shift, and go to state 78
    _println          shift, and go to state 79
    _readln           shift, and go to state 80
    _return           shift, and go to state 81
    _while            shift, and go to state 82
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    $default  reduce using rule 51 (EXPRA)

    STMTBLOCK   go to state 89
    STMT        go to state 90
    EXPRA       go to state 91
    IFSTMT      go to state 92
    WHILESTMT   go to state 93
    FORSTMT     go to state 94
    BREAKSTMT   go to state 95
    RETURNSTMT  go to state 96
    PRINTSTMT   go to state 97
    EXPR        go to state 98
    LVALUE      go to state 99
    CALL        go to state 100
    CONSTANT    go to state 101


State 70

   39 PROTOTYPE: _void _id _leftparen FORMALS . _rightparen _semicolon

    _rightparen  shift, and go to state 102


State 71

   38 PROTOTYPE: TYPE _id _leftparen FORMALS . _rightparen _semicolon

    _rightparen  shift, and go to state 103


State 72

   84 LVALUE: _id . LVALUES
   88 CALL: _id . _leftparen ACTUALS _rightparen
   89     | _id . _period _id _leftparen ACTUALS _rightparen

    _id         shift, and go to state 104
    _leftparen  shift, and go to state 105
    _period     shift, and go to state 106

    $default  reduce using rule 85 (LVALUES)

    LVALUE   go to state 107
    LVALUES  go to state 108


State 73

   66 EXPR: _leftparen . EXPR _rightparen

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 109
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 74

   40 STMTBLOCK: _leftbrace VARIABLEDECLS STMTS _rightbrace .

    $default  reduce using rule 40 (STMTBLOCK)


State 75

   53 IFSTMT: _if . _leftparen EXPR _rightparen STMT
   54       | _if . _leftparen EXPR _rightparen STMT _else STMT

    _leftparen  shift, and go to state 110


State 76

   57 BREAKSTMT: _break . _semicolon

    _semicolon  shift, and go to state 111


State 77

   56 FORSTMT: _for . _leftparen EXPRA _semicolon EXPR _semicolon EXPRA _rightparen STMT

    _leftparen  shift, and go to state 112


State 78

   83 EXPR: _newarray . _leftparen _intconstant _comma TYPE _rightparen

    _leftparen  shift, and go to state 113


State 79

   59 PRINTSTMT: _println . _leftparen EXPRS _rightparen _semicolon

    _leftparen  shift, and go to state 114


State 80

   82 EXPR: _readln . "()"

    "()"  shift, and go to state 115


State 81

   58 RETURNSTMT: _return . EXPRA _semicolon

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    $default  reduce using rule 51 (EXPRA)

    EXPRA     go to state 116
    EXPR      go to state 98
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 82

   55 WHILESTMT: _while . _leftparen EXPR _rightparen STMT

    _leftparen  shift, and go to state 117


State 83

   92 CONSTANT: _intconstant .

    $default  reduce using rule 92 (CONSTANT)


State 84

   93 CONSTANT: _doubleconstant .

    $default  reduce using rule 93 (CONSTANT)


State 85

   94 CONSTANT: _stringconstant .

    $default  reduce using rule 94 (CONSTANT)


State 86

   95 CONSTANT: _booleanconstant .

    $default  reduce using rule 95 (CONSTANT)


State 87

   72 EXPR: _minus . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 118
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 88

   81 EXPR: _not . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 119
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 89

   50 STMT: STMTBLOCK .

    $default  reduce using rule 50 (STMT)


State 90

   42 STMTS: STMTS STMT .

    $default  reduce using rule 42 (STMTS)


State 91

   43 STMT: EXPRA . _semicolon

    _semicolon  shift, and go to state 120


State 92

   44 STMT: IFSTMT .

    $default  reduce using rule 44 (STMT)


State 93

   45 STMT: WHILESTMT .

    $default  reduce using rule 45 (STMT)


State 94

   46 STMT: FORSTMT .

    $default  reduce using rule 46 (STMT)


State 95

   47 STMT: BREAKSTMT .

    $default  reduce using rule 47 (STMT)


State 96

   48 STMT: RETURNSTMT .

    $default  reduce using rule 48 (STMT)


State 97

   49 STMT: PRINTSTMT .

    $default  reduce using rule 49 (STMT)


State 98

   52 EXPRA: EXPR .
   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _or              shift, and go to state 121
    _and             shift, and go to state 122
    _equal           shift, and go to state 123
    _notequal        shift, and go to state 124
    _less            shift, and go to state 125
    _lessequal       shift, and go to state 126
    _greater         shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 52 (EXPRA)


State 99

   62 EXPR: LVALUE . _assignop EXPR
   64     | LVALUE .

    _assignop  shift, and go to state 134

    $default  reduce using rule 64 (EXPR)


State 100

   65 EXPR: CALL .

    $default  reduce using rule 65 (EXPR)


State 101

   63 EXPR: CONSTANT .

    $default  reduce using rule 63 (EXPR)


State 102

   39 PROTOTYPE: _void _id _leftparen FORMALS _rightparen . _semicolon

    _semicolon  shift, and go to state 135


State 103

   38 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen . _semicolon

    _semicolon  shift, and go to state 136


State 104

   84 LVALUE: _id . LVALUES

    _id  shift, and go to state 104

    $default  reduce using rule 85 (LVALUES)

    LVALUE   go to state 107
    LVALUES  go to state 108


State 105

   88 CALL: _id _leftparen . ACTUALS _rightparen

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    $default  reduce using rule 90 (ACTUALS)

    EXPRS     go to state 137
    EXPR      go to state 138
    LVALUE    go to state 99
    CALL      go to state 100
    ACTUALS   go to state 139
    CONSTANT  go to state 101


State 106

   89 CALL: _id _period . _id _leftparen ACTUALS _rightparen

    _id  shift, and go to state 140


State 107

   86 LVALUES: LVALUE . _leftbracket EXPR _rightbracket
   87        | LVALUE . _period _id LVALUES

    _leftbracket  shift, and go to state 141
    _period       shift, and go to state 142


State 108

   84 LVALUE: _id LVALUES .

    $default  reduce using rule 84 (LVALUE)


State 109

   66 EXPR: _leftparen EXPR . _rightparen
   67     | EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _rightparen      shift, and go to state 143
    _or              shift, and go to state 121
    _and             shift, and go to state 122
    _equal           shift, and go to state 123
    _notequal        shift, and go to state 124
    _less            shift, and go to state 125
    _lessequal       shift, and go to state 126
    _greater         shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133


State 110

   53 IFSTMT: _if _leftparen . EXPR _rightparen STMT
   54       | _if _leftparen . EXPR _rightparen STMT _else STMT

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 144
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 111

   57 BREAKSTMT: _break _semicolon .

    $default  reduce using rule 57 (BREAKSTMT)


State 112

   56 FORSTMT: _for _leftparen . EXPRA _semicolon EXPR _semicolon EXPRA _rightparen STMT

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    $default  reduce using rule 51 (EXPRA)

    EXPRA     go to state 145
    EXPR      go to state 98
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 113

   83 EXPR: _newarray _leftparen . _intconstant _comma TYPE _rightparen

    _intconstant  shift, and go to state 146


State 114

   59 PRINTSTMT: _println _leftparen . EXPRS _rightparen _semicolon

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPRS     go to state 147
    EXPR      go to state 138
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 115

   82 EXPR: _readln "()" .

    $default  reduce using rule 82 (EXPR)


State 116

   58 RETURNSTMT: _return EXPRA . _semicolon

    _semicolon  shift, and go to state 148


State 117

   55 WHILESTMT: _while _leftparen . EXPR _rightparen STMT

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 149
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 118

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   72     | _minus EXPR .
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    $default  reduce using rule 72 (EXPR)


State 119

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR
   81     | _not EXPR .

    $default  reduce using rule 81 (EXPR)


State 120

   43 STMT: EXPRA _semicolon .

    $default  reduce using rule 43 (STMT)


State 121

   80 EXPR: EXPR _or . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 150
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 122

   79 EXPR: EXPR _and . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 151
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 123

   77 EXPR: EXPR _equal . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 152
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 124

   78 EXPR: EXPR _notequal . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 153
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 125

   73 EXPR: EXPR _less . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 154
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 126

   74 EXPR: EXPR _lessequal . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 155
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 127

   75 EXPR: EXPR _greater . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 156
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 128

   76 EXPR: EXPR _greaterequal . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 157
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 129

   67 EXPR: EXPR _plus . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 158
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 130

   68 EXPR: EXPR _minus . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 159
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 131

   69 EXPR: EXPR _multiplication . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 160
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 132

   70 EXPR: EXPR _division . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 161
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 133

   71 EXPR: EXPR _mod . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 162
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 134

   62 EXPR: LVALUE _assignop . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 163
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 135

   39 PROTOTYPE: _void _id _leftparen FORMALS _rightparen _semicolon .

    $default  reduce using rule 39 (PROTOTYPE)


State 136

   38 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen _semicolon .

    $default  reduce using rule 38 (PROTOTYPE)


State 137

   61 EXPRS: EXPRS . _comma EXPR
   91 ACTUALS: EXPRS .

    _comma  shift, and go to state 164

    $default  reduce using rule 91 (ACTUALS)


State 138

   60 EXPRS: EXPR .
   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _or              shift, and go to state 121
    _and             shift, and go to state 122
    _equal           shift, and go to state 123
    _notequal        shift, and go to state 124
    _less            shift, and go to state 125
    _lessequal       shift, and go to state 126
    _greater         shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 60 (EXPRS)


State 139

   88 CALL: _id _leftparen ACTUALS . _rightparen

    _rightparen  shift, and go to state 165


State 140

   89 CALL: _id _period _id . _leftparen ACTUALS _rightparen

    _leftparen  shift, and go to state 166


State 141

   86 LVALUES: LVALUE _leftbracket . EXPR _rightbracket

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 167
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 142

   87 LVALUES: LVALUE _period . _id LVALUES

    _id  shift, and go to state 168


State 143

   66 EXPR: _leftparen EXPR _rightparen .

    $default  reduce using rule 66 (EXPR)


State 144

   53 IFSTMT: _if _leftparen EXPR . _rightparen STMT
   54       | _if _leftparen EXPR . _rightparen STMT _else STMT
   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _rightparen      shift, and go to state 169
    _or              shift, and go to state 121
    _and             shift, and go to state 122
    _equal           shift, and go to state 123
    _notequal        shift, and go to state 124
    _less            shift, and go to state 125
    _lessequal       shift, and go to state 126
    _greater         shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133


State 145

   56 FORSTMT: _for _leftparen EXPRA . _semicolon EXPR _semicolon EXPRA _rightparen STMT

    _semicolon  shift, and go to state 170


State 146

   83 EXPR: _newarray _leftparen _intconstant . _comma TYPE _rightparen

    _comma  shift, and go to state 171


State 147

   59 PRINTSTMT: _println _leftparen EXPRS . _rightparen _semicolon
   61 EXPRS: EXPRS . _comma EXPR

    _rightparen  shift, and go to state 172
    _comma       shift, and go to state 164


State 148

   58 RETURNSTMT: _return EXPRA _semicolon .

    $default  reduce using rule 58 (RETURNSTMT)


State 149

   55 WHILESTMT: _while _leftparen EXPR . _rightparen STMT
   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _rightparen      shift, and go to state 173
    _or              shift, and go to state 121
    _and             shift, and go to state 122
    _equal           shift, and go to state 123
    _notequal        shift, and go to state 124
    _less            shift, and go to state 125
    _lessequal       shift, and go to state 126
    _greater         shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133


State 150

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR
   80     | EXPR _or EXPR .

    _and             shift, and go to state 122
    _equal           shift, and go to state 123
    _notequal        shift, and go to state 124
    _less            shift, and go to state 125
    _lessequal       shift, and go to state 126
    _greater         shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 80 (EXPR)


State 151

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   79     | EXPR _and EXPR .
   80     | EXPR . _or EXPR

    _equal           shift, and go to state 123
    _notequal        shift, and go to state 124
    _less            shift, and go to state 125
    _lessequal       shift, and go to state 126
    _greater         shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 79 (EXPR)


State 152

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   77     | EXPR _equal EXPR .
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _less            shift, and go to state 125
    _lessequal       shift, and go to state 126
    _greater         shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 77 (EXPR)


State 153

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   78     | EXPR _notequal EXPR .
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _less            shift, and go to state 125
    _lessequal       shift, and go to state 126
    _greater         shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 78 (EXPR)


State 154

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   73     | EXPR _less EXPR .
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 73 (EXPR)


State 155

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   74     | EXPR _lessequal EXPR .
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 74 (EXPR)


State 156

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   75     | EXPR _greater EXPR .
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 75 (EXPR)


State 157

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   76     | EXPR _greaterequal EXPR .
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 76 (EXPR)


State 158

   67 EXPR: EXPR . _plus EXPR
   67     | EXPR _plus EXPR .
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 67 (EXPR)


State 159

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   68     | EXPR _minus EXPR .
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 68 (EXPR)


State 160

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   69     | EXPR _multiplication EXPR .
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    $default  reduce using rule 69 (EXPR)


State 161

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   70     | EXPR _division EXPR .
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    $default  reduce using rule 70 (EXPR)


State 162

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   71     | EXPR _mod EXPR .
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    $default  reduce using rule 71 (EXPR)


State 163

   62 EXPR: LVALUE _assignop EXPR .
   67     | EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _or              shift, and go to state 121
    _and             shift, and go to state 122
    _equal           shift, and go to state 123
    _notequal        shift, and go to state 124
    _less            shift, and go to state 125
    _lessequal       shift, and go to state 126
    _greater         shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 62 (EXPR)


State 164

   61 EXPRS: EXPRS _comma . EXPR

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 174
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 165

   88 CALL: _id _leftparen ACTUALS _rightparen .

    $default  reduce using rule 88 (CALL)


State 166

   89 CALL: _id _period _id _leftparen . ACTUALS _rightparen

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    $default  reduce using rule 90 (ACTUALS)

    EXPRS     go to state 137
    EXPR      go to state 138
    LVALUE    go to state 99
    CALL      go to state 100
    ACTUALS   go to state 175
    CONSTANT  go to state 101


State 167

   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR
   86 LVALUES: LVALUE _leftbracket EXPR . _rightbracket

    _rightbracket    shift, and go to state 176
    _or              shift, and go to state 121
    _and             shift, and go to state 122
    _equal           shift, and go to state 123
    _notequal        shift, and go to state 124
    _less            shift, and go to state 125
    _lessequal       shift, and go to state 126
    _greater         shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133


State 168

   87 LVALUES: LVALUE _period _id . LVALUES

    _id  shift, and go to state 104

    $default  reduce using rule 85 (LVALUES)

    LVALUE   go to state 107
    LVALUES  go to state 177


State 169

   53 IFSTMT: _if _leftparen EXPR _rightparen . STMT
   54       | _if _leftparen EXPR _rightparen . STMT _else STMT

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _leftbrace        shift, and go to state 52
    _if               shift, and go to state 75
    _break            shift, and go to state 76
    _for              shift, and go to state 77
    _newarray         shift, and go to state 78
    _println          shift, and go to state 79
    _readln           shift, and go to state 80
    _return           shift, and go to state 81
    _while            shift, and go to state 82
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    $default  reduce using rule 51 (EXPRA)

    STMTBLOCK   go to state 89
    STMT        go to state 178
    EXPRA       go to state 91
    IFSTMT      go to state 92
    WHILESTMT   go to state 93
    FORSTMT     go to state 94
    BREAKSTMT   go to state 95
    RETURNSTMT  go to state 96
    PRINTSTMT   go to state 97
    EXPR        go to state 98
    LVALUE      go to state 99
    CALL        go to state 100
    CONSTANT    go to state 101


State 170

   56 FORSTMT: _for _leftparen EXPRA _semicolon . EXPR _semicolon EXPRA _rightparen STMT

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    EXPR      go to state 179
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 171

   83 EXPR: _newarray _leftparen _intconstant _comma . TYPE _rightparen

    _id       shift, and go to state 2
    _boolean  shift, and go to state 3
    _double   shift, and go to state 4
    _int      shift, and go to state 5
    _string   shift, and go to state 6

    TYPE  go to state 180


State 172

   59 PRINTSTMT: _println _leftparen EXPRS _rightparen . _semicolon

    _semicolon  shift, and go to state 181


State 173

   55 WHILESTMT: _while _leftparen EXPR _rightparen . STMT

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _leftbrace        shift, and go to state 52
    _if               shift, and go to state 75
    _break            shift, and go to state 76
    _for              shift, and go to state 77
    _newarray         shift, and go to state 78
    _println          shift, and go to state 79
    _readln           shift, and go to state 80
    _return           shift, and go to state 81
    _while            shift, and go to state 82
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    $default  reduce using rule 51 (EXPRA)

    STMTBLOCK   go to state 89
    STMT        go to state 182
    EXPRA       go to state 91
    IFSTMT      go to state 92
    WHILESTMT   go to state 93
    FORSTMT     go to state 94
    BREAKSTMT   go to state 95
    RETURNSTMT  go to state 96
    PRINTSTMT   go to state 97
    EXPR        go to state 98
    LVALUE      go to state 99
    CALL        go to state 100
    CONSTANT    go to state 101


State 174

   61 EXPRS: EXPRS _comma EXPR .
   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _or              shift, and go to state 121
    _and             shift, and go to state 122
    _equal           shift, and go to state 123
    _notequal        shift, and go to state 124
    _less            shift, and go to state 125
    _lessequal       shift, and go to state 126
    _greater         shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133

    $default  reduce using rule 61 (EXPRS)


State 175

   89 CALL: _id _period _id _leftparen ACTUALS . _rightparen

    _rightparen  shift, and go to state 183


State 176

   86 LVALUES: LVALUE _leftbracket EXPR _rightbracket .

    $default  reduce using rule 86 (LVALUES)


State 177

   87 LVALUES: LVALUE _period _id LVALUES .

    $default  reduce using rule 87 (LVALUES)


State 178

   53 IFSTMT: _if _leftparen EXPR _rightparen STMT .
   54       | _if _leftparen EXPR _rightparen STMT . _else STMT

    _else  shift, and go to state 184

    $default  reduce using rule 53 (IFSTMT)


State 179

   56 FORSTMT: _for _leftparen EXPRA _semicolon EXPR . _semicolon EXPRA _rightparen STMT
   67 EXPR: EXPR . _plus EXPR
   68     | EXPR . _minus EXPR
   69     | EXPR . _multiplication EXPR
   70     | EXPR . _division EXPR
   71     | EXPR . _mod EXPR
   73     | EXPR . _less EXPR
   74     | EXPR . _lessequal EXPR
   75     | EXPR . _greater EXPR
   76     | EXPR . _greaterequal EXPR
   77     | EXPR . _equal EXPR
   78     | EXPR . _notequal EXPR
   79     | EXPR . _and EXPR
   80     | EXPR . _or EXPR

    _semicolon       shift, and go to state 185
    _or              shift, and go to state 121
    _and             shift, and go to state 122
    _equal           shift, and go to state 123
    _notequal        shift, and go to state 124
    _less            shift, and go to state 125
    _lessequal       shift, and go to state 126
    _greater         shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _plus            shift, and go to state 129
    _minus           shift, and go to state 130
    _multiplication  shift, and go to state 131
    _division        shift, and go to state 132
    _mod             shift, and go to state 133


State 180

   16 TYPE: TYPE . _leftbracket _rightbracket
   83 EXPR: _newarray _leftparen _intconstant _comma TYPE . _rightparen

    _rightparen   shift, and go to state 186
    _leftbracket  shift, and go to state 25


State 181

   59 PRINTSTMT: _println _leftparen EXPRS _rightparen _semicolon .

    $default  reduce using rule 59 (PRINTSTMT)


State 182

   55 WHILESTMT: _while _leftparen EXPR _rightparen STMT .

    $default  reduce using rule 55 (WHILESTMT)


State 183

   89 CALL: _id _period _id _leftparen ACTUALS _rightparen .

    $default  reduce using rule 89 (CALL)


State 184

   54 IFSTMT: _if _leftparen EXPR _rightparen STMT _else . STMT

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _leftbrace        shift, and go to state 52
    _if               shift, and go to state 75
    _break            shift, and go to state 76
    _for              shift, and go to state 77
    _newarray         shift, and go to state 78
    _println          shift, and go to state 79
    _readln           shift, and go to state 80
    _return           shift, and go to state 81
    _while            shift, and go to state 82
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    $default  reduce using rule 51 (EXPRA)

    STMTBLOCK   go to state 89
    STMT        go to state 187
    EXPRA       go to state 91
    IFSTMT      go to state 92
    WHILESTMT   go to state 93
    FORSTMT     go to state 94
    BREAKSTMT   go to state 95
    RETURNSTMT  go to state 96
    PRINTSTMT   go to state 97
    EXPR        go to state 98
    LVALUE      go to state 99
    CALL        go to state 100
    CONSTANT    go to state 101


State 185

   56 FORSTMT: _for _leftparen EXPRA _semicolon EXPR _semicolon . EXPRA _rightparen STMT

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _newarray         shift, and go to state 78
    _readln           shift, and go to state 80
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    $default  reduce using rule 51 (EXPRA)

    EXPRA     go to state 188
    EXPR      go to state 98
    LVALUE    go to state 99
    CALL      go to state 100
    CONSTANT  go to state 101


State 186

   83 EXPR: _newarray _leftparen _intconstant _comma TYPE _rightparen .

    $default  reduce using rule 83 (EXPR)


State 187

   54 IFSTMT: _if _leftparen EXPR _rightparen STMT _else STMT .

    $default  reduce using rule 54 (IFSTMT)


State 188

   56 FORSTMT: _for _leftparen EXPRA _semicolon EXPR _semicolon EXPRA . _rightparen STMT

    _rightparen  shift, and go to state 189


State 189

   56 FORSTMT: _for _leftparen EXPRA _semicolon EXPR _semicolon EXPRA _rightparen . STMT

    _id               shift, and go to state 72
    _leftparen        shift, and go to state 73
    _leftbrace        shift, and go to state 52
    _if               shift, and go to state 75
    _break            shift, and go to state 76
    _for              shift, and go to state 77
    _newarray         shift, and go to state 78
    _println          shift, and go to state 79
    _readln           shift, and go to state 80
    _return           shift, and go to state 81
    _while            shift, and go to state 82
    _intconstant      shift, and go to state 83
    _doubleconstant   shift, and go to state 84
    _stringconstant   shift, and go to state 85
    _booleanconstant  shift, and go to state 86
    _minus            shift, and go to state 87
    _not              shift, and go to state 88

    $default  reduce using rule 51 (EXPRA)

    STMTBLOCK   go to state 89
    STMT        go to state 190
    EXPRA       go to state 91
    IFSTMT      go to state 92
    WHILESTMT   go to state 93
    FORSTMT     go to state 94
    BREAKSTMT   go to state 95
    RETURNSTMT  go to state 96
    PRINTSTMT   go to state 97
    EXPR        go to state 98
    LVALUE      go to state 99
    CALL        go to state 100
    CONSTANT    go to state 101


State 190

   56 FORSTMT: _for _leftparen EXPRA _semicolon EXPR _semicolon EXPRA _rightparen STMT .

    $default  reduce using rule 56 (FORSTMT)
